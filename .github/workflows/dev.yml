name: Backend Dev CI

on:
  push:
    branches:
      - develop

env:
  SKIP_TEST_TYPECHECK: true

defaults:
  run:
    shell: bash

jobs:
  lint-format:
    name: Lint & Type Check (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements.txt', 'pyproject.toml', 'mypy.ini') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install ruff black mypy types-requests types-passlib

      - name: Ruff
        run: ruff check backend

      - name: Black
        run: black --check backend

      - name: Mypy
        run: mypy backend/ --exclude '/tests/' --config-file=mypy.ini

  tests:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: lint-format
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: petmatch
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    env:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/petmatch
      PYTHONPATH: ${{ github.workspace }}
      ENV_FILE: backend/.env
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements.txt', 'pyproject.toml', 'mypy.ini') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov coverage ruff black mypy types-requests types-passlib

      - name: Wait for database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..60}; do
            if pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i/60: PostgreSQL not ready yet..."
            sleep 2
          done
          echo "PostgreSQL failed to become ready in 120 seconds"
          exit 1
        env:
          PGPASSWORD: postgres

      - name: Apply migrations
        working-directory: backend
        run: alembic upgrade head

      - name: Run tests
        run: pytest -q --cov=backend --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
