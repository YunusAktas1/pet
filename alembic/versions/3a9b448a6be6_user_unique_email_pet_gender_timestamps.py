"""user unique email, pet gender & timestamps

Revision ID: 3a9b448a6be6
Revises: 0fd75c505db7
Create Date: 2025-10-06 19:56:28.319436

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "3a9b448a6be6"
down_revision: Union[str, Sequence[str], None] = "0fd75c505db7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    gender_enum = postgresql.ENUM('male', 'female', 'unknown', name='gender')
    gender_enum.create(op.get_bind(), checkfirst=True)
    op.add_column(
        "pet",
        sa.Column('gender', gender_enum, nullable=False, server_default='unknown'),
    )
    op.alter_column('pet', 'gender', server_default=None)
    op.add_column("pet", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.add_column("user", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.create_unique_constraint("uq_user_email", "user", ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_user_email", "user", type_="unique")
    op.drop_column("user", "created_at")
    op.drop_column('pet', 'created_at')
    op.drop_column('pet', 'gender')
    gender_enum = postgresql.ENUM('male', 'female', 'unknown', name='gender')
    gender_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
