"""add pair table

Revision ID: bd9f2bc61dcb
Revises: 7c8d9e0f1a23
Create Date: 2025-10-09 20:39:05.726012

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bd9f2bc61dcb'
down_revision: Union[str, Sequence[str], None] = '7c8d9e0f1a23'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_matches_candidate_pet_id'), table_name='matches')
    op.drop_index(op.f('ix_matches_pet_id'), table_name='matches')
    op.drop_table('matches')
    op.drop_index(op.f('ix_match_owner_decision'), table_name='match')
    op.drop_constraint(op.f('uq_match_owner_target_pet'), 'match', type_='unique')
    op.create_unique_constraint('uq_match_owner_target', 'match', ['owner_user_id', 'target_pet_id'])
    op.drop_index(op.f('ix_message_created_at'), table_name='message')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_message_created_at'), 'message', ['created_at'], unique=False)
    op.drop_constraint('uq_match_owner_target', 'match', type_='unique')
    op.create_unique_constraint(op.f('uq_match_owner_target_pet'), 'match', ['owner_user_id', 'target_pet_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_match_owner_decision'), 'match', ['owner_user_id', 'decision'], unique=False)
    op.create_table('matches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pet_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('candidate_pet_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['candidate_pet_id'], ['pet.id'], name=op.f('matches_candidate_pet_id_fkey')),
    sa.ForeignKeyConstraint(['pet_id'], ['pet.id'], name=op.f('matches_pet_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('matches_pkey')),
    sa.UniqueConstraint('pet_id', 'candidate_pet_id', name=op.f('uq_match_pet_candidate'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_matches_pet_id'), 'matches', ['pet_id'], unique=False)
    op.create_index(op.f('ix_matches_candidate_pet_id'), 'matches', ['candidate_pet_id'], unique=False)
    # ### end Alembic commands ###
